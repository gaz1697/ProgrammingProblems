#include <bits/stdc++.h>
using namespace std;

int main() {

    int t;
    cin >> t;
    while(t--){
    // 'n' is the number of rows in the triangle
    int n;
    cin >> n;
    // 'v' is a vector array representing the values in the triangle
    // 'dp' is a a vector array representing the maximum sum at each position
    vector<int> v[n];
    vector<int> dp[n];
    
    // Read in the values of the triangle and store them in 'v'
    for(int i = 0; i < n; i++){
        for(int k = 0; k < i + 1; k++){
            int x;
            cin >> x;
            v[i].push_back(x);
        }
    }
    
    // Initialize the first element of 'dp' with the first element of 'v'
    dp[0].push_back(v[0][0]);
    
    // 'ans' stores the maximum sum found so far
    int ans = v[0][0];
    for (int i = 1; i < n; i++) {
        for (int j = 0; j < i + 1; j++) {
            // If 'j' is the first element in the row
            if(j == 0){
                // The maximum sum at this position is the value at this position plus the value in the same column of the previous row
                dp[i].push_back(v[i][j] + dp[i - 1][j]);
            } 
            // If 'j' is the last element in the row
            else if(i == j){
                // The maximum sum at this position is the value at this position plus the value in the previous column of the previous row
                dp[i].push_back(v[i][j] + dp[i - 1][j - 1]);
            }
            // Otherwise, the maximum sum at this position is the value at this position plus the maximum of the two possible paths (same or previous)
            // columns from the previous row
            else{
                dp[i].push_back(v[i][j] + max(dp[i - 1][j], dp[i - 1][j - 1]));
            }
            // Update 'ans' with the maximum sum found so far
            ans = max(dp[i][j], ans);
        }
    }
    
    // Output the maximum sum
    cout << ans << endl;
}
return 0;
}
